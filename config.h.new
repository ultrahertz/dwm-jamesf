/* Based on jasonwryan config.h */
/* Based on alexx's config.h 
 * https://bbs.archlinux.org/viewtopic.php?id=74599&p=31 */
/* See LICENSE file for copyright and license details. */

/* appearance */
#define NUMCOLORS 13 
static const char colors[NUMCOLORS][ColLast][13] = {
// border foreground background
    { "#212121", "#919191", "#171313" },  // 0 = normal
    { "#4D79FF", "#4779b3", "#171313" },  // 1 = selected, highlight
    { "#ff0000", "#CF4F88", "#171313" },  // 2 = jwr-alert red
    { "#e0f04e", "#e0f04e", "#171313" },  // 3 = bright green on dark
    { "#f7f7f7", "#cf4f88", "#171313" },  // 4 = jwr-red
    { "#f7f7f7", "#7e62b3", "#171313" },  // 5 = jwr-magenta
    { "#f7f7f7", "#914e89", "#171313" },  // 6 = jwr-yellow
    { "#f7f7f7", "#53a6a6", "#171313" },  // 7 = jwr-green
    { "#f7f7f7", "#3ab166", "#171313" },  // 8 = oceangreen
    { "#f7f7f7", "#4779b3", "#171313" },  // 9 = jwr-blue 
    { "#f7f7f7", "#8c38a1", "#171313" },  // 10 = indigo
    { "#f7f7f7", "#d0447f", "#171313" },  // 11 = violet
    { "#c3c3c3", "#899ca1", "#171313" },  // 12 = jwr-gray
};

static char font[] = "Terminus:pixelsize=12:antialias=true:autohint=full";
static char font2[] = "Terminus:pixelsize=16:antialias=true:autohint=full";
static const unsigned int tagspacing = 3;       /* space between tags */
static const unsigned int tagpadding = 25;      /* inner padding of tags */
static const unsigned int borderpx  = 1;         /* border pixel of windows */
static const unsigned int gappx     = 2;         /* gap size between windows */
static const unsigned int taglinepx = 2;         /* height of tag underline */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const Bool showsystray = True;           /* false means no systray */  
static const unsigned int snap      = 8;         /* snap pixel */
static const Bool showbar           = True;      /* False means no bar */
static const Bool topbar            = True;      /* False means bottom bar */
/* tagging */
/*static const char *tags[] = { "web", "terminal", "media", "steam", "mail", "misc",};*/

static const Tag tags[] = {
     /* name        layout          mfact   nmaster */
     { "web",       &layouts[0],    -1,     -1 },
     { "term",      &layouts[0],    -1,     -1 },
     { "emacs",     &layouts[3],    -1,     -1 },
     { "docs",      &layouts[0],    -1,     -1 },
     { "java",      &layouts[0],    -1,     -1 },
     { "sys",       &layouts[0],    -1,     -1 },                              
     { "logs",      &layouts[0],    -1,     -1 },                              
     { "misc",      &layouts[0],    -1,     -1 },                              
     { "vlc",       &layouts[0],    -1,     -1 },                              
};

static const Rule rules[] = {
   { "Chromium",    NULL,       NULL,       1 << 0,       False, True,       -1 },
   { "Filezilla",   NULL,       NULL,       1 << 0,       True,  True,       -1 },
   { "Spacefm",     NULL,       NULL,       0,            True,  True,       -1 },
   { "Truecrypt",   NULL,       NULL,       0,            True,  True,       -1 },
   { "Dwb",         NULL,       NULL,       1 << 0,       False, True,       -1 },
   { "Steam",       NULL,       NULL,       1 << 3,       False, True,       -1 },
   { "Gimp",        NULL,       NULL,       0,            True,  True,       -1 },
   {  NULL,         "mutt",     NULL,       1 << 4,       False, True,       -1 },
   {  NULL,         "tmux",     NULL,       1 << 1,       False, True,       -1 },
   { "mpv",         NULL,       NULL,       0,            True,  True,       -1 },
};

/* layout(s) */
static const float mfact      = 0.60;  /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;     /* number of clients in master area */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     gaps    function */
      { "þ",      True,   tile },
      { "ü",      True,   bstack },
      { "ÿ",      False,  monocle },
      { "ý",      False,  NULL },

};


/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,     {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,           {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char  *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", colors[0][ColBG], "-nf", colors[0][ColFG], "-sb", colors[1][ColBG], "-sf", colors[1][ColFG], NULL };
static const char   *termcmd[] = { "urxvtc", NULL };
static const char   *mailcmd[] = { "urxvtc", "--name=mutt", "-e", "mutt", NULL };
static const char   *tmuxcmd[] = { "urxvtc", "--name=tmux", "-e", "tmux", NULL };
static const char   *lockcmd[] = { "xautolock", "-locknow", NULL };

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, runorraise,          {.v = termcmd } },
    { MODKEY|ShiftMask,             XK_m,      runorraise,          {.v = mailcmd } },
    { MODKEY|ShiftMask,             XK_z,      runorraise,          SHCMD("filezilla") },
	{ MODKEY|ShiftMask,             XK_t,      spawn,          {.v = tmuxcmd } },
	{ ControlMask|MODKEY,           XK_l,      spawn,          {.v = lockcmd } },	
    { MODKEY|ShiftMask,             XK_w,      spawn,          SHCMD("dwb") }, 
    { MODKEY|ShiftMask,             XK_f,      spawn,          SHCMD("spacefm") }, 
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY|ControlMask,           XK_j,      pushdown,       {0} },
	{ MODKEY|ControlMask,           XK_k,      pushup,         {0} },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_s,      setlayout,      {.v = &layouts[3]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY,                       XK_Left,   cycle,          {.i = -1 } },
	{ MODKEY,                       XK_Right,  cycle,          {.i = +1 } },
	{ MODKEY|ControlMask,           XK_Left,   tagcycle,       {.i = -1 } },
	{ MODKEY|ControlMask,           XK_Right,  tagcycle,       {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ControlMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

